#pragma once

//
//	Pixel font data generated by bitfontmaker2 - https://www.pentacom.jp/pentacom/bitfontmaker2/
//                                                            Font is Owls N' Ink by DubzyWubzyUbzy. Slightly modified.
//	https://www.pentacom.jp/pentacom/bitfontmaker2/gallery/?id=556
//
//  Keys in dict are ASCII character codes.
//  The array associated with a character is a list of rows in its bitmap image.
//  Each number is a bit field representing which pixels are filled or blank in that row.
//  When converted to a binary string, 1s are filled pixels, 0s are blank.

#include <QList>
#include <QHash>
#include <QPainter>

using Font = QHash<int, QList<int>>;

Font gen_text_qhash() {
    Font h;
    h.insert(33,{0,28,28,28,28,28,28,12,12,0,0,12,12,0,0,0});
    h.insert(34,{0,0,108,44,4,0,0,0,0,0,0,0,0,0,0,0});
    h.insert(35,{0,0,216,216,216,1020,216,72,1020,216,216,216,0,0,0,0});
    h.insert(36,{0,96,496,360,108,108,248,352,356,364,508,248,32,0,0,0});
    h.insert(37,{0,0,536,548,292,308,1208,2704,4800,4672,6752,3104,0,0,0,0});
    h.insert(38,{0,0,112,152,136,152,112,632,716,396,476,888,512,0,0,0});
    h.insert(39,{0,12,12,4,6,0,0,0,0,0,0,0,0,0,0,0});
    h.insert(40,{0,0,48,24,24,12,12,12,12,12,12,12,24,48,0,0});
    h.insert(41,{0,0,12,24,48,48,48,48,48,48,48,24,24,12,0,0});
    h.insert(42,{0,0,16,56,56,16,0,0,0,0,0,0,0,0,0,0});
    h.insert(43,{0,0,0,0,48,48,252,124,48,48,0,0,0,0,0,0});
    h.insert(44,{0,0,0,0,0,0,0,0,0,0,12,12,4,2,0,0});
    h.insert(45,{0,0,0,0,0,0,60,28,0,0,0,0,0,0,0,0});
    h.insert(46,{0,0,0,0,0,0,0,0,0,0,12,12,0,0,0,0});
    h.insert(47,{0,0,48,48,16,24,24,8,12,12,12,4,4,0,0,0});
    h.insert(48,{0,240,504,396,396,460,428,412,396,412,252,120,0,0,0,0});
    h.insert(49,{0,64,96,112,124,108,96,96,96,96,96,96,32,0,0,0});
    h.insert(50,{0,240,504,412,396,196,96,48,24,204,508,60,0,0,0,0});
    h.insert(51,{0,240,472,396,448,96,192,896,772,908,504,224,0,0,0,0});
    h.insert(52,{0,192,192,224,240,208,200,460,252,192,192,192,64,0,0,0});
    h.insert(53,{0,124,252,12,8,120,192,388,260,396,248,112,0,0,0,0});
    h.insert(54,{0,240,504,392,12,100,244,396,260,396,248,112,0,0,0,0});
    h.insert(55,{0,252,252,192,96,96,48,48,24,24,24,24,8,0,0,0});
    h.insert(56,{0,96,240,152,136,112,248,396,260,396,504,240,0,0,0,0});
    h.insert(57,{0,112,216,136,140,220,248,176,132,196,124,56,0,0,0,0});
    h.insert(58,{0,0,0,0,0,8,8,0,0,8,8,8,0,0,0,0});
    h.insert(59,{0,0,0,0,0,8,8,0,0,8,8,4,4,0,0,0});
    h.insert(60,{0,0,0,0,0,240,392,260,340,260,388,132,72,104,48,0});
    h.insert(61,{0,0,0,0,124,252,0,252,252,0,0,0,0,0,0,0});
    h.insert(62,{0,0,0,0,0,120,140,260,340,260,268,264,144,176,96,0});
    h.insert(63,{0,112,248,396,396,192,96,48,16,0,48,48,0,0,0,0});
    h.insert(64,{0,0,496,1016,1564,1516,3564,3564,3564,3788,1048,496,992,0,0,0});
    h.insert(65,{0,64,192,480,352,304,816,784,536,2040,1548,1548,4,0,0,0});
    h.insert(66,{0,236,412,780,780,396,508,396,780,780,1020,508,0,0,0,0});
    h.insert(67,{0,224,496,792,792,12,524,1548,1548,1820,1016,240,0,0,0,0});
    h.insert(68,{0,124,508,908,780,1548,1548,1548,1548,1804,1020,252,0,0,0,0});
    h.insert(69,{0,1020,508,12,12,508,12,12,12,12,1020,508,0,0,0,0});
    h.insert(70,{0,508,252,12,12,508,12,12,12,12,12,4,0,0,0,0});
    h.insert(71,{0,480,1008,1816,1548,12,1932,1548,1548,792,1016,496,0,0,0,0});
    h.insert(72,{0,780,780,780,780,1020,1020,780,780,780,780,780,4,0,0,0});
    h.insert(73,{0,12,12,12,12,12,12,12,12,12,12,12,4,0,0,0});
    h.insert(74,{0,384,384,384,384,384,384,384,192,204,236,120,48,0,0,0});
    h.insert(75,{0,524,780,396,204,108,60,108,108,204,460,396,4,0,0,0});
    h.insert(76,{0,8,12,12,12,12,12,12,12,12,504,248,0,0,0,0});
    h.insert(77,{0,792,1852,3436,3436,3436,6604,6604,6604,12684,12684,8584,0,0,0,0});
    h.insert(78,{0,524,540,828,828,812,876,876,844,844,972,392,0,0,0,0});
    h.insert(79,{0,240,504,796,524,1548,1548,1548,1548,1816,1008,480,0,0,0,0});
    h.insert(80,{0,252,508,908,780,780,780,508,12,12,12,12,4,0,0,0});
    h.insert(81,{0,0,240,504,796,1548,1548,1548,1676,1304,752,3552,0,0,0,0});
    h.insert(82,{0,508,1020,1804,1548,1804,1020,252,396,268,780,1548,1536,0,0,0});
    h.insert(83,{0,496,1016,524,12,248,496,768,772,780,1016,496,0,0,0,0});
    h.insert(84,{0,1020,508,96,96,96,96,64,192,192,192,192,0,0,0,0});
    h.insert(85,{0,264,268,268,780,780,780,780,780,396,408,240,0,0,0,0});
    h.insert(86,{0,512,524,524,780,776,792,408,400,208,240,32,0,0,0,0});
    h.insert(87,{0,4100,6348,6348,6348,6616,6616,7128,2768,2768,3824,3296,2112,0,0,0});
    h.insert(88,{0,0,396,396,408,216,240,96,240,216,408,780,0,0,0,0});
    h.insert(89,{0,4,780,780,408,240,96,96,96,64,192,192,0,0,0,0});
    h.insert(90,{0,1020,1020,768,384,192,96,48,24,12,1020,508,0,0,0,0});
    h.insert(91,{60,12,12,12,12,12,12,12,12,12,12,12,12,60,0,0});
    h.insert(92,{0,0,12,12,8,24,24,16,48,48,48,32,32,0,0,0});
    h.insert(93,{60,48,48,48,48,48,48,48,48,48,48,48,48,60,0,0});
    h.insert(94,{0,0,0,0,0,112,136,340,260,260,396,136,80,112,0,0});
    h.insert(95,{0,0,0,0,0,0,0,0,0,0,0,0,0,1020,508,0});
    h.insert(96,{0,0,12,12,16,0,0,0,0,0,0,0,0,0,0,0});
    h.insert(97,{0,0,0,0,240,408,384,504,452,460,508,376,0,0,0,0});
    h.insert(98,{12,12,12,12,108,156,156,396,396,412,252,108,4,0,0,0});
    h.insert(99,{0,0,0,0,112,248,216,12,12,140,152,112,0,0,0,0});
    h.insert(100,{384,384,384,384,432,456,456,396,396,460,504,432,256,0,0,0});
    h.insert(101,{0,0,0,0,224,496,792,908,508,12,396,248,112,0,0,0});
    h.insert(102,{0,48,56,24,28,124,24,24,24,24,24,8,0,0,0,0});
    h.insert(103,{0,0,0,384,440,460,460,388,388,460,504,432,388,460,248,0});
    h.insert(104,{12,12,12,12,108,156,156,396,396,396,396,396,132,0,0,0});
    h.insert(105,{0,0,8,12,0,0,12,12,12,12,12,4,0,0,0,0});
    h.insert(106,{0,0,16,24,0,24,24,24,24,24,24,24,26,30,12,0});
    h.insert(107,{12,12,12,12,204,236,60,28,60,108,204,204,4,0,0,0});
    h.insert(108,{0,0,12,12,12,12,12,12,12,12,12,12,4,0,0,0});
    h.insert(109,{0,0,0,0,556,1916,3964,3276,3276,6540,6540,6540,0,0,0,0});
    h.insert(110,{0,0,0,0,44,124,252,204,204,396,396,396,0,0,0,0});
    h.insert(111,{0,0,0,0,240,504,396,780,780,792,504,240,0,0,0,0});
    h.insert(112,{0,0,0,0,236,412,412,268,268,412,252,108,12,12,12,8});
    h.insert(113,{0,0,0,0,440,460,460,388,388,460,504,432,384,384,384,256});
    h.insert(114,{0,0,0,0,108,124,28,12,12,12,12,12,0,0,0,0});
    h.insert(115,{0,0,0,0,0,120,204,24,96,134,252,120,0,0,0,0});
    h.insert(116,{0,0,16,24,24,60,28,24,24,24,24,24,48,0,0,0});
    h.insert(117,{0,0,0,0,0,140,204,204,204,200,248,176,0,0,0,0});
    h.insert(118,{0,0,0,0,0,140,140,216,216,88,112,48,0,0,0,0});
    h.insert(119,{0,0,0,0,3148,3276,3276,3544,3544,1360,1904,1632,0,0,0,0});
    h.insert(120,{0,0,0,0,128,196,204,88,48,88,204,196,128,0,0,0});
    h.insert(121,{0,0,0,0,0,268,396,392,152,216,112,96,100,60,24,0});
    h.insert(122,{0,0,0,0,0,252,252,192,112,24,252,124,0,0,0,0});
    h.insert(123,{0,112,24,24,24,24,8,12,24,24,24,24,112,32,0,0});
    h.insert(124,{0,0,12,12,12,12,12,12,12,12,12,12,12,12,4,0});
    h.insert(125,{0,28,48,48,48,48,32,96,48,48,48,48,28,8,0,0});
    h.insert(126,{0,0,0,0,0,0,280,508,196,0,0,0,0,0,0,0});
    h.insert(161,{0,0,0,24,24,0,0,24,24,28,28,28,28,28,28,0});
    h.insert(162,{0,0,256,384,128,240,344,328,76,44,300,248,48,16,16,0});
    h.insert(163,{0,96,208,392,24,24,124,24,24,24,396,508,0,0,0,0});
    h.insert(164,{0,0,0,256,232,496,408,408,248,368,8,0,0,0,0,0});
    h.insert(165,{0,0,780,780,408,240,96,508,64,504,192,192,0,0,0,0});
    h.insert(166,{0,12,12,12,12,12,12,0,0,12,12,12,12,12,4,0});
    h.insert(167,{0,7168,16128,16000,16064,16032,4240,7732,2088,1036,968,408,636,14,6,0});
    h.insert(168,{0,0,108,108,0,0,0,0,0,0,0,0,0,0,0,0});
    h.insert(169,{0,240,504,796,524,1772,1580,1772,1548,1816,1008,480,0,0,0,0});
    h.insert(8364,{0,240,144,136,8,124,8,252,8,280,496,224,0,0,0,0});
    return h;
}

// Left-adjusted drawing routine
void draw_small_text_l(const Font &font, QPainter &painter, QPoint pos, QString text, QColor color) {
    int x = pos.x();
    int y = pos.y();
    int bearing_x = 2;
    int space_size = 5;
    painter.setBrush(QBrush(color));
    for (QChar c : text) {
        int size = 0;
        if (font.contains(c.unicode())) {
            QList<int> bitmap = font.value(c.unicode());
            for (int cy = 0; cy < 16; cy++) {
                int row = bitmap[cy];
                for (int cx = 0; cx < 16; cx++) {
                    if (row & (0b1 << cx)) {
                        painter.drawPoint(cx-bearing_x+x, cy+y);
                        int size = std::max(size, cx-bearing_x);
                    }
                }
            }
        }
        x = c.unicode() != 32 ? x+size+2 : x+space_size;
    }
}

// Right-adjusted drawing routine
void draw_small_text_r(const Font &font, QPainter &painter, QPoint pos, QString text, QColor color) {
    int bearing_x = 2;
    int space_size = 5;
    int total_size = -1;
    painter.setBrush(QBrush(color));
    for (QChar c : text) {
        int size = 0;
        if (font.contains(c.unicode())) {
            QList<int> bitmap = font.value(c.unicode());
            for (int cy = 0; cy < 16; cy++) {
                int row = bitmap[cy];
                for (int cx = 0; cx < 16; cx++) {
                    if (row & (0b1 << cx)) {
                        int size = std::max(size, cx-bearing_x);
                    }
                }
            }
        }
        total_size = c.unicode() != 32 ? total_size+size+2 : total_size+space_size;
    }
    int x = pos.x() - total_size;
    int y = pos.y();
    for (QChar c : text) {
        int size = 0;
        if (font.contains(c.unicode())) {
            QList<int> bitmap = font.value(c.unicode());
            for (int cy = 0; cy < 16; cy++) {
                int row = bitmap[cy];
                for (int cx = 0; cx < 16; cx++) {
                    if (row & (0b1 << cx)) {
                        painter.drawPoint(cx-bearing_x+x, cy+y);
                        int size = std::max(size, cx-bearing_x);
                    }
                }
            }
        }
        x = c.unicode() != 32 ? x+size+2 : x+space_size;
    }
}
